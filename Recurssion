// function countDown(num)
// {

//     if(num <= 0)
//     {
//         console.log('All done')
//         return
//     }
//     console.log(num)
//     num--
//     countDown(num)
// }

// countDown(4)
 // **************
// function sumRange(num)
// {
//     if(num === 1) return 1
//     return num + sumRange(num-1)
// }
// sumRange(4)




// **************

// FACTORIAL SOLUTION
 
// function factorial(x){
//    if (x < 0 ) return 0;
//    if (x <= 1 ) return 1;
//    return x * factorial(x-1);
// }
// factorial(3)


// ****************

// POWER SOLUTION

// function power(base, exponent){
//     if(exponent === 0) return 1;
//     return base * power(base,exponent-1);
// }

// power(2,3)



// ****************


// PRODUCT OF ARRAY SOLUTION

// function productOfArray(arr) {
//     if(arr.length === 0) {
//         return 1;
//     }
//     return arr[0] * productOfArray(arr.slice(1));
// }

// productOfArray([1,2,3])


// *******************

// RECURSIVE RANGE SOLUTION

// function recurssiveRange(x){
//     if(x === 0) return 0
// return x + recurssiveRange(x-1) 
// }

// recurssiveRange(3)



// *******************

// Finpnacci series

// function fib(n){
//     if (n <= 2) return 1;
//     return fib(n-1) + fib(n-2);
// }

// fib(5)



// *******************

// REverse Sollution

// function reverse(str){
// 	if(str.length <= 1) return str;
// 	return reverse(str.slice(1)) + str[0];
// }

// reverse("Hello")


// *************

// isPalindrome Solution

// function isPalindrome(str){
//     if(str.length === 1) return true;
//     if(str.length === 2) return str[0] === str[1];
//     if(str[0] === str.slice(-1)) return isPalindrome(str.slice(1,-1))
//     return false;
// }

// isPalindrome("toasssaot")


// *************

// someRecursive Solution -> return if any single value in an array return true for a callback function
// function someRecursive(array, callback) {
//     if (array.length === 0) return false;
//     if (callback(array[0])) return true;
//     return someRecursive(array.slice(1),callback);
// }
// // SAMPLE INPUT / OUTPUT
// const isOdd = val => val % 2 !== 0;

// // someRecursive([1,2,3,4], isOdd) // true
// // someRecursive([4,6,8,9], isOdd) // true
// // someRecursive([4,6,8], isOdd) // false
// // someRecursive([4,6,8], val => val > 10); // false

// someRecursive([1,2,3],isOdd)



// **********

// flatten -> accept an array of arrays and return a new array with all values flatten
// function flatten(oldArr){
//   var newArr = []
//   	for(var i = 0; i < oldArr.length; i++){
//     	if(Array.isArray(oldArr[i])){
//       		newArr = newArr.concat(flatten(oldArr[i]))
//     	} else {
//       		newArr.push(oldArr[i])
//     	}
//   } 
//   return newArr;
// }

// flatten([1,2,3],[7,8,9])


// Captialazie first letteer of string

// function capitalizeFirst(str)
// {
//     if(str.length === 0) return true
//     const charFirst = str.slice(0)[0].toUpperCase()
// //     console.log(charFirst)
// //     console.log(charFirst+str.slice(1))
//     return charFirst+str.slice(1)
// }

// capitalizeFirst("abhishek")

// For ARray of strings

// function capitalizeWords (array) {
//   if (array.length === 1) {
//     return [array[0].toUpperCase()];
//   }
//   let res = capitalizeWords(array.slice(0, -1));
// console.log(res)
//   res.push(array.slice(array.length-1)[0].toUpperCase());
//   console.log(res)
//   return res;
 
// }
// let words = ['hello', 'bro', 'abhishek'];
// capitalizeWords(words)


//Stringify Numbers


// let obj = {
//     num: 1,
//     test: [],
//     data: {
//         val: 4,
//         info: {
//             isRight: true,
//             random: 66
//         }
//     }
// }

// stringifyNumbers(obj)

// function stringifyNumbers(obj) {
//   var newObj = {};
//   for (var key in obj) {
//     if (typeof obj[key] === 'number') {
//       newObj[key] = obj[key].toString();
//     } else if (typeof obj[key] === 'object') {
//       newObj[key] = stringifyNumbers(obj[key]);
//     } else {
//       newObj[key] = obj[key];
//     }
//   }
//   return newObj;
// }



// *********

// collect all strings from array sollution : 
// let object2 = {
//     stuff: "foo",
//     data: {
//         val: {
//             thing: {
//                 info: "bar",
//                 moreInfo: {
//                     evenMoreInfo: {
//                         weMadeIt: "baz"
//                     }
//                 }
//             }
//         }
//     }
// }

// collectStrings(object2) // ["foo", "bar", "baz"])

// function collectStrings(object)
// {
//    var stringArr = []
//    function gatherString(o)
//    {
//         for(let key in o)
//         {
//             if(typeof o[key] === "string")
//             {
//                 stringArr.push(o[key])
//             }
//             else if(typeof o[key] === "object")
//             {
//                 return gatherString(o[key])
//             }
//         }
//    }
// gatherString(object)
// return stringArr
// }

// // with pure recursion 

// function collectStrings(object2) {
//     var stringsArr = [];
//     for(var key in object2) {
//         if(typeof object2[key] === 'string') {
//             stringsArr.push(object2[key]);
//         }
//         else if(typeof object2[key] === 'object') {
//             stringsArr = stringsArr.concat(collectStrings(object2[key]));
//         }
//     }
 
//     return stringsArr;
// }


// Sum of sum(1)(2)(4)(5)...(n)

let sum = a => b =>  b? sum(a+b) : a
console.log(sum(1)(2)(3)(4)(5)(10)())